/*
Given the head of a linked list, return the list after sorting it in ascending order.

Example 1:

Input: head = [4,2,1,3]
Output: [1,2,3,4]

Example 2:

Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

Example 3:

Input: head = []
Output: []
 
Constraints:

The number of nodes in the list is in the range [0, 5 * 10^4].
-10^5 <= Node.val <= 10^5


METHOD:(USING MERGE SORT)

TIME: O(NlogN).

SPACE: O(logN).
*/

class Solution {
    public ListNode sortList(ListNode head) {
        
        // if the head is null || there is only one element then return head
        if(head == null || head.next == null){
            return head;
        }
        
        // finding the middle of the list
        ListNode mid = getMiddle(head);
        ListNode head2 = mid.next;
        
        // setting the next of the middle to null
        mid.next = null;
        
        // divided into two halves
        ListNode left = sortList(head);
        ListNode right = sortList(head2);
        
        ListNode sortedList = mergeList(left, right);
        
        return sortedList;
    }
    
    // simple merge sort
    private ListNode mergeList(ListNode n1, ListNode n2){
        
        ListNode dummyNode = new ListNode(-100001);
        ListNode prev = dummyNode;
        
        // if both of them are not null
        while(n1 != null && n2 != null){
            
            if(n1.val < n2.val){
                prev.next = n1;
                n1 = n1.next;
            }
            else{
                prev.next = n2;
                n2 = n2.next;
            }
            
            prev = prev.next;
        }
        
        prev.next = n1 != null ? n1 : n2;
        
        return dummyNode.next;
    }
    
    private ListNode getMiddle(ListNode head){
        
        ListNode fast = head, slow = head;
        
        while(fast.next != null && fast.next.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }
        
        return slow;
    }
}