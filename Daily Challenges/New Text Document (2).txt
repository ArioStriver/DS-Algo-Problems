/*
Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.

Example 1:

Input: n = 2
Output: [0,1,1]

Explanation:
0 --> 0
1 --> 1
2 --> 10

Example 2:

Input: n = 5
Output: [0,1,1,2,1,2]

Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101

METHOD 1:
	APPROACH: count the number of set bits one by one for each number.

TIME: O(NlogN), O(N) for N number of elements and O(logN) for counting the number of set bits.

SPACE: O(1).
*/

class Solution {
    public int[] countBits(int n) {
        
        int[] result = new int[n+1];
        
        for(int i = 0; i <= n; i++){
            
            int count = 0;
            int num = i;
            
            // counting the number of sets bits
            // checking bit by bit one at a time
            while(num > 0){
                count += num & 1;
                num >>= 1;      // performing right-shift operation
            }
            result[i] = count;
        }
        
        return result;
    }
}


/*
METHOD 2: