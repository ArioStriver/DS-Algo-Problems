/*
K-diff Pairs in an Array

Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.

A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:

0 <= i < j < nums.length
|nums[i] - nums[j]| == k

Notice that |val| denotes the absolute value of val.

Example 1:

Input: nums = [3,1,4,1,5], k = 2
Output: 2

Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.

Example 2:

Input: nums = [1,2,3,4,5], k = 1
Output: 4

Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).

Example 3:

Input: nums = [1,3,1,5,4], k = 0
Output: 1

Explanation: There is one 0-diff pair in the array, (1, 1).
 
Constraints:

1 <= nums.length <= 10^4
-10^7 <= nums[i] <= 10^7
0 <= k <= 10^7


METHOD 1:(BRUTE FORCE)
	APPROACH:
		Cosidering each index as the starting point of the pair and then try to find the second element of the pair whose differenr is = k. After getting a pair
		we generally store that pair into the set so that if we'll later come across that pair then we just ignore it. Suppose we get first pair as (0, 3). Later
		we got (3, 0) which is same, in that case we ignore this pair as we already computed for this pair.

TIME: O(N^2), where N is the length of the array

SPACE: O(N).
*/

class Solution {
    public int findPairs(int[] nums, int k) {
        
        int n = nums.length;
        int diffPairCount = 0;
        
        Set<String> seen = new HashSet();
        
        // considering the each index as the starting position of the pair
        for(int i = 0; i < n-1; i++){
            
            // traversing the rest of the elements and calculate its absolute value
            for(int j = i+1; j < n; j++){
                
		// why taking min and max?
                // So that (0,3) and (3,0) or (4,7) & (7,4) will be treated as same

                if(seen.add(Math.min(nums[i], nums[j])+","+Math.max(nums[i], nums[j])) && Math.abs(nums[i] - nums[j]) == k){
                    diffPairCount++;
                }
            }
        }
        
        return diffPairCount;
    }
} 