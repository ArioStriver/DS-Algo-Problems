/*
You are given a binary string s. In one second, all occurrences of "01" are simultaneously replaced with "10". This process repeats until no occurrences of "01" exist.

Return the number of seconds needed to complete this process.

Example 1:

Input: s = "0110101"
Output: 4

Explanation: 
After one second, s becomes "1011010".
After another second, s becomes "1101100".
After the third second, s becomes "1110100".
After the fourth second, s becomes "1111000".
No occurrence of "01" exists any longer, and the process needed 4 seconds to complete,
so we return 4.

Example 2:

Input: s = "11100"
Output: 0

Explanation:
No occurrence of "01" exists in s, and the processes needed 0 seconds to complete,
so we return 0.
 
Constraints:

1 <= s.length <= 1000
s[i] is either '0' or '1'.


METHOD 1:(BRUTE FORCE)

TIME: 

SPACE: O(1).
*/

class Solution {
    
    private void swap(char[] ch, int i, int j) {
        char temp = ch[i];
        ch[i] = ch[j];
        ch[j] = temp;
    }
    
    public int secondsToRemoveOccurrences(String s) {
     
        int secondCount = 0;
        boolean changed = true;
        char[] ch = s.toCharArray();
        
        // loop untill there is '01' present in the string
        while(changed == true) {
        
            changed = false;
            s = new String(ch);    // considering the new string ecah time
            
            for(int i = 0; i < s.length()-1; i++) {
                
                // if the current character and next character is '01'
                // change it to '10', and as we are changing the string so changed = true
                if(s.charAt(i) == '0' && s.charAt(i+1) == '1') {
                    swap(ch, i, i+1);
                    i++;               // skipping the next character
                    changed = true;
                }
            }
            
            // if there is a chnage in the string, count that
            if(changed == true) {
                secondCount++;
            }
        }
        
        return secondCount;
    }
}

// SHORTER VERSION

class Solution {
    
    public int secondsToRemoveOccurrences(String s) {
     
        int secondCount = 0;
        
        // finding the index of the "01" string, loop untill "01" sis present in the string
        while(s.indexOf("01") >= 0) {
            
            // replacing the '01' with '10'
            s = s.replace("01", "10");
            secondCount++;
        }
        
        return secondCount;
    }
}